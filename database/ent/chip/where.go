// Code generated by ent, DO NOT EDIT.

package chip

import (
	"time"
	"viseh-api/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chip {
	return predicate.Chip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chip {
	return predicate.Chip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chip {
	return predicate.Chip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chip {
	return predicate.Chip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chip {
	return predicate.Chip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chip {
	return predicate.Chip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chip {
	return predicate.Chip(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldName, v))
}

// ChipType applies equality check predicate on the "chip_type" field. It's identical to ChipTypeEQ.
func ChipType(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldChipType, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldLastUpdated, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chip {
	return predicate.Chip(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chip {
	return predicate.Chip(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chip {
	return predicate.Chip(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chip {
	return predicate.Chip(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chip {
	return predicate.Chip(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chip {
	return predicate.Chip(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chip {
	return predicate.Chip(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chip {
	return predicate.Chip(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chip {
	return predicate.Chip(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chip {
	return predicate.Chip(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chip {
	return predicate.Chip(sql.FieldContainsFold(FieldName, v))
}

// ChipTypeEQ applies the EQ predicate on the "chip_type" field.
func ChipTypeEQ(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldChipType, v))
}

// ChipTypeNEQ applies the NEQ predicate on the "chip_type" field.
func ChipTypeNEQ(v string) predicate.Chip {
	return predicate.Chip(sql.FieldNEQ(FieldChipType, v))
}

// ChipTypeIn applies the In predicate on the "chip_type" field.
func ChipTypeIn(vs ...string) predicate.Chip {
	return predicate.Chip(sql.FieldIn(FieldChipType, vs...))
}

// ChipTypeNotIn applies the NotIn predicate on the "chip_type" field.
func ChipTypeNotIn(vs ...string) predicate.Chip {
	return predicate.Chip(sql.FieldNotIn(FieldChipType, vs...))
}

// ChipTypeGT applies the GT predicate on the "chip_type" field.
func ChipTypeGT(v string) predicate.Chip {
	return predicate.Chip(sql.FieldGT(FieldChipType, v))
}

// ChipTypeGTE applies the GTE predicate on the "chip_type" field.
func ChipTypeGTE(v string) predicate.Chip {
	return predicate.Chip(sql.FieldGTE(FieldChipType, v))
}

// ChipTypeLT applies the LT predicate on the "chip_type" field.
func ChipTypeLT(v string) predicate.Chip {
	return predicate.Chip(sql.FieldLT(FieldChipType, v))
}

// ChipTypeLTE applies the LTE predicate on the "chip_type" field.
func ChipTypeLTE(v string) predicate.Chip {
	return predicate.Chip(sql.FieldLTE(FieldChipType, v))
}

// ChipTypeContains applies the Contains predicate on the "chip_type" field.
func ChipTypeContains(v string) predicate.Chip {
	return predicate.Chip(sql.FieldContains(FieldChipType, v))
}

// ChipTypeHasPrefix applies the HasPrefix predicate on the "chip_type" field.
func ChipTypeHasPrefix(v string) predicate.Chip {
	return predicate.Chip(sql.FieldHasPrefix(FieldChipType, v))
}

// ChipTypeHasSuffix applies the HasSuffix predicate on the "chip_type" field.
func ChipTypeHasSuffix(v string) predicate.Chip {
	return predicate.Chip(sql.FieldHasSuffix(FieldChipType, v))
}

// ChipTypeEqualFold applies the EqualFold predicate on the "chip_type" field.
func ChipTypeEqualFold(v string) predicate.Chip {
	return predicate.Chip(sql.FieldEqualFold(FieldChipType, v))
}

// ChipTypeContainsFold applies the ContainsFold predicate on the "chip_type" field.
func ChipTypeContainsFold(v string) predicate.Chip {
	return predicate.Chip(sql.FieldContainsFold(FieldChipType, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.Chip {
	return predicate.Chip(sql.FieldLTE(FieldLastUpdated, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Chip {
	return predicate.Chip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Chip {
	return predicate.Chip(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chip) predicate.Chip {
	return predicate.Chip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chip) predicate.Chip {
	return predicate.Chip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chip) predicate.Chip {
	return predicate.Chip(sql.NotPredicates(p))
}
