// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"viseh-api/database/ent/migrate"

	"viseh-api/database/ent/chip"
	"viseh-api/database/ent/key"
	"viseh-api/database/ent/meduser"
	"viseh-api/database/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chip is the client for interacting with the Chip builders.
	Chip *ChipClient
	// Key is the client for interacting with the Key builders.
	Key *KeyClient
	// MedUser is the client for interacting with the MedUser builders.
	MedUser *MedUserClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chip = NewChipClient(c.config)
	c.Key = NewKeyClient(c.config)
	c.MedUser = NewMedUserClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Chip:    NewChipClient(cfg),
		Key:     NewKeyClient(cfg),
		MedUser: NewMedUserClient(cfg),
		User:    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Chip:    NewChipClient(cfg),
		Key:     NewKeyClient(cfg),
		MedUser: NewMedUserClient(cfg),
		User:    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chip.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chip.Use(hooks...)
	c.Key.Use(hooks...)
	c.MedUser.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Chip.Intercept(interceptors...)
	c.Key.Intercept(interceptors...)
	c.MedUser.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChipMutation:
		return c.Chip.mutate(ctx, m)
	case *KeyMutation:
		return c.Key.mutate(ctx, m)
	case *MedUserMutation:
		return c.MedUser.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChipClient is a client for the Chip schema.
type ChipClient struct {
	config
}

// NewChipClient returns a client for the Chip from the given config.
func NewChipClient(c config) *ChipClient {
	return &ChipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chip.Hooks(f(g(h())))`.
func (c *ChipClient) Use(hooks ...Hook) {
	c.hooks.Chip = append(c.hooks.Chip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chip.Intercept(f(g(h())))`.
func (c *ChipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chip = append(c.inters.Chip, interceptors...)
}

// Create returns a builder for creating a Chip entity.
func (c *ChipClient) Create() *ChipCreate {
	mutation := newChipMutation(c.config, OpCreate)
	return &ChipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chip entities.
func (c *ChipClient) CreateBulk(builders ...*ChipCreate) *ChipCreateBulk {
	return &ChipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChipClient) MapCreateBulk(slice any, setFunc func(*ChipCreate, int)) *ChipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChipCreateBulk{err: fmt.Errorf("calling to ChipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chip.
func (c *ChipClient) Update() *ChipUpdate {
	mutation := newChipMutation(c.config, OpUpdate)
	return &ChipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChipClient) UpdateOne(ch *Chip) *ChipUpdateOne {
	mutation := newChipMutation(c.config, OpUpdateOne, withChip(ch))
	return &ChipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChipClient) UpdateOneID(id int) *ChipUpdateOne {
	mutation := newChipMutation(c.config, OpUpdateOne, withChipID(id))
	return &ChipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chip.
func (c *ChipClient) Delete() *ChipDelete {
	mutation := newChipMutation(c.config, OpDelete)
	return &ChipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChipClient) DeleteOne(ch *Chip) *ChipDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChipClient) DeleteOneID(id int) *ChipDeleteOne {
	builder := c.Delete().Where(chip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChipDeleteOne{builder}
}

// Query returns a query builder for Chip.
func (c *ChipClient) Query() *ChipQuery {
	return &ChipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChip},
		inters: c.Interceptors(),
	}
}

// Get returns a Chip entity by its id.
func (c *ChipClient) Get(ctx context.Context, id int) (*Chip, error) {
	return c.Query().Where(chip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChipClient) GetX(ctx context.Context, id int) *Chip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Chip.
func (c *ChipClient) QueryUsers(ch *Chip) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chip.Table, chip.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chip.UsersTable, chip.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChipClient) Hooks() []Hook {
	return c.hooks.Chip
}

// Interceptors returns the client interceptors.
func (c *ChipClient) Interceptors() []Interceptor {
	return c.inters.Chip
}

func (c *ChipClient) mutate(ctx context.Context, m *ChipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chip mutation op: %q", m.Op())
	}
}

// KeyClient is a client for the Key schema.
type KeyClient struct {
	config
}

// NewKeyClient returns a client for the Key from the given config.
func NewKeyClient(c config) *KeyClient {
	return &KeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `key.Hooks(f(g(h())))`.
func (c *KeyClient) Use(hooks ...Hook) {
	c.hooks.Key = append(c.hooks.Key, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `key.Intercept(f(g(h())))`.
func (c *KeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Key = append(c.inters.Key, interceptors...)
}

// Create returns a builder for creating a Key entity.
func (c *KeyClient) Create() *KeyCreate {
	mutation := newKeyMutation(c.config, OpCreate)
	return &KeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Key entities.
func (c *KeyClient) CreateBulk(builders ...*KeyCreate) *KeyCreateBulk {
	return &KeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KeyClient) MapCreateBulk(slice any, setFunc func(*KeyCreate, int)) *KeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KeyCreateBulk{err: fmt.Errorf("calling to KeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Key.
func (c *KeyClient) Update() *KeyUpdate {
	mutation := newKeyMutation(c.config, OpUpdate)
	return &KeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KeyClient) UpdateOne(k *Key) *KeyUpdateOne {
	mutation := newKeyMutation(c.config, OpUpdateOne, withKey(k))
	return &KeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KeyClient) UpdateOneID(id string) *KeyUpdateOne {
	mutation := newKeyMutation(c.config, OpUpdateOne, withKeyID(id))
	return &KeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Key.
func (c *KeyClient) Delete() *KeyDelete {
	mutation := newKeyMutation(c.config, OpDelete)
	return &KeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KeyClient) DeleteOne(k *Key) *KeyDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KeyClient) DeleteOneID(id string) *KeyDeleteOne {
	builder := c.Delete().Where(key.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KeyDeleteOne{builder}
}

// Query returns a query builder for Key.
func (c *KeyClient) Query() *KeyQuery {
	return &KeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKey},
		inters: c.Interceptors(),
	}
}

// Get returns a Key entity by its id.
func (c *KeyClient) Get(ctx context.Context, id string) (*Key, error) {
	return c.Query().Where(key.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KeyClient) GetX(ctx context.Context, id string) *Key {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *KeyClient) Hooks() []Hook {
	return c.hooks.Key
}

// Interceptors returns the client interceptors.
func (c *KeyClient) Interceptors() []Interceptor {
	return c.inters.Key
}

func (c *KeyClient) mutate(ctx context.Context, m *KeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Key mutation op: %q", m.Op())
	}
}

// MedUserClient is a client for the MedUser schema.
type MedUserClient struct {
	config
}

// NewMedUserClient returns a client for the MedUser from the given config.
func NewMedUserClient(c config) *MedUserClient {
	return &MedUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meduser.Hooks(f(g(h())))`.
func (c *MedUserClient) Use(hooks ...Hook) {
	c.hooks.MedUser = append(c.hooks.MedUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meduser.Intercept(f(g(h())))`.
func (c *MedUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.MedUser = append(c.inters.MedUser, interceptors...)
}

// Create returns a builder for creating a MedUser entity.
func (c *MedUserClient) Create() *MedUserCreate {
	mutation := newMedUserMutation(c.config, OpCreate)
	return &MedUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MedUser entities.
func (c *MedUserClient) CreateBulk(builders ...*MedUserCreate) *MedUserCreateBulk {
	return &MedUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MedUserClient) MapCreateBulk(slice any, setFunc func(*MedUserCreate, int)) *MedUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MedUserCreateBulk{err: fmt.Errorf("calling to MedUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MedUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MedUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MedUser.
func (c *MedUserClient) Update() *MedUserUpdate {
	mutation := newMedUserMutation(c.config, OpUpdate)
	return &MedUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedUserClient) UpdateOne(mu *MedUser) *MedUserUpdateOne {
	mutation := newMedUserMutation(c.config, OpUpdateOne, withMedUser(mu))
	return &MedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedUserClient) UpdateOneID(id int) *MedUserUpdateOne {
	mutation := newMedUserMutation(c.config, OpUpdateOne, withMedUserID(id))
	return &MedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MedUser.
func (c *MedUserClient) Delete() *MedUserDelete {
	mutation := newMedUserMutation(c.config, OpDelete)
	return &MedUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MedUserClient) DeleteOne(mu *MedUser) *MedUserDeleteOne {
	return c.DeleteOneID(mu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MedUserClient) DeleteOneID(id int) *MedUserDeleteOne {
	builder := c.Delete().Where(meduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedUserDeleteOne{builder}
}

// Query returns a query builder for MedUser.
func (c *MedUserClient) Query() *MedUserQuery {
	return &MedUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedUser},
		inters: c.Interceptors(),
	}
}

// Get returns a MedUser entity by its id.
func (c *MedUserClient) Get(ctx context.Context, id int) (*MedUser, error) {
	return c.Query().Where(meduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedUserClient) GetX(ctx context.Context, id int) *MedUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MedUserClient) Hooks() []Hook {
	return c.hooks.MedUser
}

// Interceptors returns the client interceptors.
func (c *MedUserClient) Interceptors() []Interceptor {
	return c.inters.MedUser
}

func (c *MedUserClient) mutate(ctx context.Context, m *MedUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MedUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MedUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MedUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MedUser mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChips queries the chips edge of a User.
func (c *UserClient) QueryChips(u *User) *ChipQuery {
	query := (&ChipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(chip.Table, chip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ChipsTable, user.ChipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chip, Key, MedUser, User []ent.Hook
	}
	inters struct {
		Chip, Key, MedUser, User []ent.Interceptor
	}
)
