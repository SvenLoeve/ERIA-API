// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"viseh-api/database/ent/meduser"
	"viseh-api/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MedUserUpdate is the builder for updating MedUser entities.
type MedUserUpdate struct {
	config
	hooks    []Hook
	mutation *MedUserMutation
}

// Where appends a list predicates to the MedUserUpdate builder.
func (muu *MedUserUpdate) Where(ps ...predicate.MedUser) *MedUserUpdate {
	muu.mutation.Where(ps...)
	return muu
}

// SetName sets the "name" field.
func (muu *MedUserUpdate) SetName(s string) *MedUserUpdate {
	muu.mutation.SetName(s)
	return muu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillableName(s *string) *MedUserUpdate {
	if s != nil {
		muu.SetName(*s)
	}
	return muu
}

// SetEmail sets the "email" field.
func (muu *MedUserUpdate) SetEmail(s string) *MedUserUpdate {
	muu.mutation.SetEmail(s)
	return muu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillableEmail(s *string) *MedUserUpdate {
	if s != nil {
		muu.SetEmail(*s)
	}
	return muu
}

// SetPassword sets the "password" field.
func (muu *MedUserUpdate) SetPassword(s string) *MedUserUpdate {
	muu.mutation.SetPassword(s)
	return muu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillablePassword(s *string) *MedUserUpdate {
	if s != nil {
		muu.SetPassword(*s)
	}
	return muu
}

// SetPhoneNumber sets the "phone_number" field.
func (muu *MedUserUpdate) SetPhoneNumber(s string) *MedUserUpdate {
	muu.mutation.SetPhoneNumber(s)
	return muu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillablePhoneNumber(s *string) *MedUserUpdate {
	if s != nil {
		muu.SetPhoneNumber(*s)
	}
	return muu
}

// SetRole sets the "role" field.
func (muu *MedUserUpdate) SetRole(m meduser.Role) *MedUserUpdate {
	muu.mutation.SetRole(m)
	return muu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillableRole(m *meduser.Role) *MedUserUpdate {
	if m != nil {
		muu.SetRole(*m)
	}
	return muu
}

// SetOrganisation sets the "organisation" field.
func (muu *MedUserUpdate) SetOrganisation(s string) *MedUserUpdate {
	muu.mutation.SetOrganisation(s)
	return muu
}

// SetNillableOrganisation sets the "organisation" field if the given value is not nil.
func (muu *MedUserUpdate) SetNillableOrganisation(s *string) *MedUserUpdate {
	if s != nil {
		muu.SetOrganisation(*s)
	}
	return muu
}

// Mutation returns the MedUserMutation object of the builder.
func (muu *MedUserUpdate) Mutation() *MedUserMutation {
	return muu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (muu *MedUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, muu.sqlSave, muu.mutation, muu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muu *MedUserUpdate) SaveX(ctx context.Context) int {
	affected, err := muu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (muu *MedUserUpdate) Exec(ctx context.Context) error {
	_, err := muu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muu *MedUserUpdate) ExecX(ctx context.Context) {
	if err := muu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muu *MedUserUpdate) check() error {
	if v, ok := muu.mutation.Name(); ok {
		if err := meduser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MedUser.name": %w`, err)}
		}
	}
	if v, ok := muu.mutation.Email(); ok {
		if err := meduser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "MedUser.email": %w`, err)}
		}
	}
	if v, ok := muu.mutation.Role(); ok {
		if err := meduser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "MedUser.role": %w`, err)}
		}
	}
	return nil
}

func (muu *MedUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := muu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(meduser.Table, meduser.Columns, sqlgraph.NewFieldSpec(meduser.FieldID, field.TypeInt))
	if ps := muu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muu.mutation.Name(); ok {
		_spec.SetField(meduser.FieldName, field.TypeString, value)
	}
	if value, ok := muu.mutation.Email(); ok {
		_spec.SetField(meduser.FieldEmail, field.TypeString, value)
	}
	if value, ok := muu.mutation.Password(); ok {
		_spec.SetField(meduser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muu.mutation.PhoneNumber(); ok {
		_spec.SetField(meduser.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := muu.mutation.Role(); ok {
		_spec.SetField(meduser.FieldRole, field.TypeEnum, value)
	}
	if value, ok := muu.mutation.Organisation(); ok {
		_spec.SetField(meduser.FieldOrganisation, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, muu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	muu.mutation.done = true
	return n, nil
}

// MedUserUpdateOne is the builder for updating a single MedUser entity.
type MedUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedUserMutation
}

// SetName sets the "name" field.
func (muuo *MedUserUpdateOne) SetName(s string) *MedUserUpdateOne {
	muuo.mutation.SetName(s)
	return muuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillableName(s *string) *MedUserUpdateOne {
	if s != nil {
		muuo.SetName(*s)
	}
	return muuo
}

// SetEmail sets the "email" field.
func (muuo *MedUserUpdateOne) SetEmail(s string) *MedUserUpdateOne {
	muuo.mutation.SetEmail(s)
	return muuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillableEmail(s *string) *MedUserUpdateOne {
	if s != nil {
		muuo.SetEmail(*s)
	}
	return muuo
}

// SetPassword sets the "password" field.
func (muuo *MedUserUpdateOne) SetPassword(s string) *MedUserUpdateOne {
	muuo.mutation.SetPassword(s)
	return muuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillablePassword(s *string) *MedUserUpdateOne {
	if s != nil {
		muuo.SetPassword(*s)
	}
	return muuo
}

// SetPhoneNumber sets the "phone_number" field.
func (muuo *MedUserUpdateOne) SetPhoneNumber(s string) *MedUserUpdateOne {
	muuo.mutation.SetPhoneNumber(s)
	return muuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillablePhoneNumber(s *string) *MedUserUpdateOne {
	if s != nil {
		muuo.SetPhoneNumber(*s)
	}
	return muuo
}

// SetRole sets the "role" field.
func (muuo *MedUserUpdateOne) SetRole(m meduser.Role) *MedUserUpdateOne {
	muuo.mutation.SetRole(m)
	return muuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillableRole(m *meduser.Role) *MedUserUpdateOne {
	if m != nil {
		muuo.SetRole(*m)
	}
	return muuo
}

// SetOrganisation sets the "organisation" field.
func (muuo *MedUserUpdateOne) SetOrganisation(s string) *MedUserUpdateOne {
	muuo.mutation.SetOrganisation(s)
	return muuo
}

// SetNillableOrganisation sets the "organisation" field if the given value is not nil.
func (muuo *MedUserUpdateOne) SetNillableOrganisation(s *string) *MedUserUpdateOne {
	if s != nil {
		muuo.SetOrganisation(*s)
	}
	return muuo
}

// Mutation returns the MedUserMutation object of the builder.
func (muuo *MedUserUpdateOne) Mutation() *MedUserMutation {
	return muuo.mutation
}

// Where appends a list predicates to the MedUserUpdate builder.
func (muuo *MedUserUpdateOne) Where(ps ...predicate.MedUser) *MedUserUpdateOne {
	muuo.mutation.Where(ps...)
	return muuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muuo *MedUserUpdateOne) Select(field string, fields ...string) *MedUserUpdateOne {
	muuo.fields = append([]string{field}, fields...)
	return muuo
}

// Save executes the query and returns the updated MedUser entity.
func (muuo *MedUserUpdateOne) Save(ctx context.Context) (*MedUser, error) {
	return withHooks(ctx, muuo.sqlSave, muuo.mutation, muuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muuo *MedUserUpdateOne) SaveX(ctx context.Context) *MedUser {
	node, err := muuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muuo *MedUserUpdateOne) Exec(ctx context.Context) error {
	_, err := muuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muuo *MedUserUpdateOne) ExecX(ctx context.Context) {
	if err := muuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muuo *MedUserUpdateOne) check() error {
	if v, ok := muuo.mutation.Name(); ok {
		if err := meduser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MedUser.name": %w`, err)}
		}
	}
	if v, ok := muuo.mutation.Email(); ok {
		if err := meduser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "MedUser.email": %w`, err)}
		}
	}
	if v, ok := muuo.mutation.Role(); ok {
		if err := meduser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "MedUser.role": %w`, err)}
		}
	}
	return nil
}

func (muuo *MedUserUpdateOne) sqlSave(ctx context.Context) (_node *MedUser, err error) {
	if err := muuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(meduser.Table, meduser.Columns, sqlgraph.NewFieldSpec(meduser.FieldID, field.TypeInt))
	id, ok := muuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meduser.FieldID)
		for _, f := range fields {
			if !meduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muuo.mutation.Name(); ok {
		_spec.SetField(meduser.FieldName, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Email(); ok {
		_spec.SetField(meduser.FieldEmail, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Password(); ok {
		_spec.SetField(meduser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muuo.mutation.PhoneNumber(); ok {
		_spec.SetField(meduser.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Role(); ok {
		_spec.SetField(meduser.FieldRole, field.TypeEnum, value)
	}
	if value, ok := muuo.mutation.Organisation(); ok {
		_spec.SetField(meduser.FieldOrganisation, field.TypeString, value)
	}
	_node = &MedUser{config: muuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muuo.mutation.done = true
	return _node, nil
}
