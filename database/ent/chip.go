// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"viseh-api/database/ent/chip"
	"viseh-api/database/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Chip is the model entity for the Chip schema.
type Chip struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ChipType holds the value of the "chip_type" field.
	ChipType string `json:"chip_type,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChipQuery when eager-loading is set.
	Edges        ChipEdges `json:"edges"`
	user_chips   *int
	selectValues sql.SelectValues
}

// ChipEdges holds the relations/edges for other nodes in the graph.
type ChipEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChipEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chip.FieldID:
			values[i] = new(sql.NullInt64)
		case chip.FieldName, chip.FieldChipType:
			values[i] = new(sql.NullString)
		case chip.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case chip.ForeignKeys[0]: // user_chips
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chip fields.
func (c *Chip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chip.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case chip.FieldChipType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chip_type", values[i])
			} else if value.Valid {
				c.ChipType = value.String
			}
		case chip.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				c.LastUpdated = value.Time
			}
		case chip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_chips", value)
			} else if value.Valid {
				c.user_chips = new(int)
				*c.user_chips = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chip.
// This includes values selected through modifiers, order, etc.
func (c *Chip) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Chip entity.
func (c *Chip) QueryUsers() *UserQuery {
	return NewChipClient(c.config).QueryUsers(c)
}

// Update returns a builder for updating this Chip.
// Note that you need to call Chip.Unwrap() before calling this method if this Chip
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chip) Update() *ChipUpdateOne {
	return NewChipClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chip) Unwrap() *Chip {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chip is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chip) String() string {
	var builder strings.Builder
	builder.WriteString("Chip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("chip_type=")
	builder.WriteString(c.ChipType)
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(c.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Chips is a parsable slice of Chip.
type Chips []*Chip
