// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChipsColumns holds the columns for the "chips" table.
	ChipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 50, Default: "Lil chip"},
		{Name: "chip_type", Type: field.TypeString, Size: 100},
		{Name: "last_updated", Type: field.TypeTime},
		{Name: "user_chips", Type: field.TypeInt, Nullable: true},
	}
	// ChipsTable holds the schema information for the "chips" table.
	ChipsTable = &schema.Table{
		Name:       "chips",
		Columns:    ChipsColumns,
		PrimaryKey: []*schema.Column{ChipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chips_users_chips",
				Columns:    []*schema.Column{ChipsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// KeysColumns holds the columns for the "keys" table.
	KeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
	}
	// KeysTable holds the schema information for the "keys" table.
	KeysTable = &schema.Table{
		Name:       "keys",
		Columns:    KeysColumns,
		PrimaryKey: []*schema.Column{KeysColumns[0]},
	}
	// MedUsersColumns holds the columns for the "med_users" table.
	MedUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 50, Default: "john doe"},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "password", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ambulance", "doctor"}},
		{Name: "organisation", Type: field.TypeString},
	}
	// MedUsersTable holds the schema information for the "med_users" table.
	MedUsersTable = &schema.Table{
		Name:       "med_users",
		Columns:    MedUsersColumns,
		PrimaryKey: []*schema.Column{MedUsersColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 50, Default: "john doe"},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "password", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "encryption_key", Type: field.TypeString},
		{Name: "med_id", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "employee", "admin"}},
		{Name: "data", Type: field.TypeBytes, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChipsTable,
		KeysTable,
		MedUsersTable,
		UsersTable,
	}
)

func init() {
	ChipsTable.ForeignKeys[0].RefTable = UsersTable
}
