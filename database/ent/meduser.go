// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"viseh-api/database/ent/meduser"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MedUser is the model entity for the MedUser schema.
type MedUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Role holds the value of the "role" field.
	Role meduser.Role `json:"role,omitempty"`
	// Organisation holds the value of the "organisation" field.
	Organisation string `json:"organisation,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meduser.FieldID:
			values[i] = new(sql.NullInt64)
		case meduser.FieldName, meduser.FieldEmail, meduser.FieldPassword, meduser.FieldPhoneNumber, meduser.FieldRole, meduser.FieldOrganisation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedUser fields.
func (mu *MedUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meduser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mu.ID = int(value.Int64)
		case meduser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mu.Name = value.String
			}
		case meduser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				mu.Email = value.String
			}
		case meduser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				mu.Password = value.String
			}
		case meduser.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				mu.PhoneNumber = value.String
			}
		case meduser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				mu.Role = meduser.Role(value.String)
			}
		case meduser.FieldOrganisation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organisation", values[i])
			} else if value.Valid {
				mu.Organisation = value.String
			}
		default:
			mu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedUser.
// This includes values selected through modifiers, order, etc.
func (mu *MedUser) Value(name string) (ent.Value, error) {
	return mu.selectValues.Get(name)
}

// Update returns a builder for updating this MedUser.
// Note that you need to call MedUser.Unwrap() before calling this method if this MedUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (mu *MedUser) Update() *MedUserUpdateOne {
	return NewMedUserClient(mu.config).UpdateOne(mu)
}

// Unwrap unwraps the MedUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mu *MedUser) Unwrap() *MedUser {
	_tx, ok := mu.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedUser is not a transactional entity")
	}
	mu.config.driver = _tx.drv
	return mu
}

// String implements the fmt.Stringer.
func (mu *MedUser) String() string {
	var builder strings.Builder
	builder.WriteString("MedUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mu.ID))
	builder.WriteString("name=")
	builder.WriteString(mu.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(mu.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(mu.Password)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(mu.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", mu.Role))
	builder.WriteString(", ")
	builder.WriteString("organisation=")
	builder.WriteString(mu.Organisation)
	builder.WriteByte(')')
	return builder.String()
}

// MedUsers is a parsable slice of MedUser.
type MedUsers []*MedUser
