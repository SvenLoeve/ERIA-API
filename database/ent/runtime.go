// Code generated by ent, DO NOT EDIT.

package ent

import (
	"viseh-api/database/ent/chip"
	"viseh-api/database/ent/key"
	"viseh-api/database/ent/meduser"
	"viseh-api/database/ent/schema"
	"viseh-api/database/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chipFields := schema.Chip{}.Fields()
	_ = chipFields
	// chipDescName is the schema descriptor for name field.
	chipDescName := chipFields[0].Descriptor()
	// chip.DefaultName holds the default value on creation for the name field.
	chip.DefaultName = chipDescName.Default.(string)
	// chip.NameValidator is a validator for the "name" field. It is called by the builders before save.
	chip.NameValidator = chipDescName.Validators[0].(func(string) error)
	// chipDescChipType is the schema descriptor for chip_type field.
	chipDescChipType := chipFields[1].Descriptor()
	// chip.ChipTypeValidator is a validator for the "chip_type" field. It is called by the builders before save.
	chip.ChipTypeValidator = chipDescChipType.Validators[0].(func(string) error)
	keyFields := schema.Key{}.Fields()
	_ = keyFields
	// keyDescID is the schema descriptor for id field.
	keyDescID := keyFields[0].Descriptor()
	// key.DefaultID holds the default value on creation for the id field.
	key.DefaultID = keyDescID.Default.(string)
	meduserFields := schema.MedUser{}.Fields()
	_ = meduserFields
	// meduserDescName is the schema descriptor for name field.
	meduserDescName := meduserFields[0].Descriptor()
	// meduser.DefaultName holds the default value on creation for the name field.
	meduser.DefaultName = meduserDescName.Default.(string)
	// meduser.NameValidator is a validator for the "name" field. It is called by the builders before save.
	meduser.NameValidator = meduserDescName.Validators[0].(func(string) error)
	// meduserDescEmail is the schema descriptor for email field.
	meduserDescEmail := meduserFields[1].Descriptor()
	// meduser.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	meduser.EmailValidator = meduserDescEmail.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
