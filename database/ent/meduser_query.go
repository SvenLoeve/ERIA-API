// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"viseh-api/database/ent/meduser"
	"viseh-api/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MedUserQuery is the builder for querying MedUser entities.
type MedUserQuery struct {
	config
	ctx        *QueryContext
	order      []meduser.OrderOption
	inters     []Interceptor
	predicates []predicate.MedUser
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MedUserQuery builder.
func (muq *MedUserQuery) Where(ps ...predicate.MedUser) *MedUserQuery {
	muq.predicates = append(muq.predicates, ps...)
	return muq
}

// Limit the number of records to be returned by this query.
func (muq *MedUserQuery) Limit(limit int) *MedUserQuery {
	muq.ctx.Limit = &limit
	return muq
}

// Offset to start from.
func (muq *MedUserQuery) Offset(offset int) *MedUserQuery {
	muq.ctx.Offset = &offset
	return muq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (muq *MedUserQuery) Unique(unique bool) *MedUserQuery {
	muq.ctx.Unique = &unique
	return muq
}

// Order specifies how the records should be ordered.
func (muq *MedUserQuery) Order(o ...meduser.OrderOption) *MedUserQuery {
	muq.order = append(muq.order, o...)
	return muq
}

// First returns the first MedUser entity from the query.
// Returns a *NotFoundError when no MedUser was found.
func (muq *MedUserQuery) First(ctx context.Context) (*MedUser, error) {
	nodes, err := muq.Limit(1).All(setContextOp(ctx, muq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{meduser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (muq *MedUserQuery) FirstX(ctx context.Context) *MedUser {
	node, err := muq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MedUser ID from the query.
// Returns a *NotFoundError when no MedUser ID was found.
func (muq *MedUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = muq.Limit(1).IDs(setContextOp(ctx, muq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{meduser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (muq *MedUserQuery) FirstIDX(ctx context.Context) int {
	id, err := muq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MedUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MedUser entity is found.
// Returns a *NotFoundError when no MedUser entities are found.
func (muq *MedUserQuery) Only(ctx context.Context) (*MedUser, error) {
	nodes, err := muq.Limit(2).All(setContextOp(ctx, muq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{meduser.Label}
	default:
		return nil, &NotSingularError{meduser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (muq *MedUserQuery) OnlyX(ctx context.Context) *MedUser {
	node, err := muq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MedUser ID in the query.
// Returns a *NotSingularError when more than one MedUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (muq *MedUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = muq.Limit(2).IDs(setContextOp(ctx, muq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{meduser.Label}
	default:
		err = &NotSingularError{meduser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (muq *MedUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := muq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MedUsers.
func (muq *MedUserQuery) All(ctx context.Context) ([]*MedUser, error) {
	ctx = setContextOp(ctx, muq.ctx, "All")
	if err := muq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MedUser, *MedUserQuery]()
	return withInterceptors[[]*MedUser](ctx, muq, qr, muq.inters)
}

// AllX is like All, but panics if an error occurs.
func (muq *MedUserQuery) AllX(ctx context.Context) []*MedUser {
	nodes, err := muq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MedUser IDs.
func (muq *MedUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if muq.ctx.Unique == nil && muq.path != nil {
		muq.Unique(true)
	}
	ctx = setContextOp(ctx, muq.ctx, "IDs")
	if err = muq.Select(meduser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (muq *MedUserQuery) IDsX(ctx context.Context) []int {
	ids, err := muq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (muq *MedUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, muq.ctx, "Count")
	if err := muq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, muq, querierCount[*MedUserQuery](), muq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (muq *MedUserQuery) CountX(ctx context.Context) int {
	count, err := muq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (muq *MedUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, muq.ctx, "Exist")
	switch _, err := muq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (muq *MedUserQuery) ExistX(ctx context.Context) bool {
	exist, err := muq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MedUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (muq *MedUserQuery) Clone() *MedUserQuery {
	if muq == nil {
		return nil
	}
	return &MedUserQuery{
		config:     muq.config,
		ctx:        muq.ctx.Clone(),
		order:      append([]meduser.OrderOption{}, muq.order...),
		inters:     append([]Interceptor{}, muq.inters...),
		predicates: append([]predicate.MedUser{}, muq.predicates...),
		// clone intermediate query.
		sql:  muq.sql.Clone(),
		path: muq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MedUser.Query().
//		GroupBy(meduser.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (muq *MedUserQuery) GroupBy(field string, fields ...string) *MedUserGroupBy {
	muq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MedUserGroupBy{build: muq}
	grbuild.flds = &muq.ctx.Fields
	grbuild.label = meduser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.MedUser.Query().
//		Select(meduser.FieldName).
//		Scan(ctx, &v)
func (muq *MedUserQuery) Select(fields ...string) *MedUserSelect {
	muq.ctx.Fields = append(muq.ctx.Fields, fields...)
	sbuild := &MedUserSelect{MedUserQuery: muq}
	sbuild.label = meduser.Label
	sbuild.flds, sbuild.scan = &muq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MedUserSelect configured with the given aggregations.
func (muq *MedUserQuery) Aggregate(fns ...AggregateFunc) *MedUserSelect {
	return muq.Select().Aggregate(fns...)
}

func (muq *MedUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range muq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, muq); err != nil {
				return err
			}
		}
	}
	for _, f := range muq.ctx.Fields {
		if !meduser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if muq.path != nil {
		prev, err := muq.path(ctx)
		if err != nil {
			return err
		}
		muq.sql = prev
	}
	return nil
}

func (muq *MedUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MedUser, error) {
	var (
		nodes = []*MedUser{}
		_spec = muq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MedUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MedUser{config: muq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, muq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (muq *MedUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := muq.querySpec()
	_spec.Node.Columns = muq.ctx.Fields
	if len(muq.ctx.Fields) > 0 {
		_spec.Unique = muq.ctx.Unique != nil && *muq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, muq.driver, _spec)
}

func (muq *MedUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(meduser.Table, meduser.Columns, sqlgraph.NewFieldSpec(meduser.FieldID, field.TypeInt))
	_spec.From = muq.sql
	if unique := muq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if muq.path != nil {
		_spec.Unique = true
	}
	if fields := muq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meduser.FieldID)
		for i := range fields {
			if fields[i] != meduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := muq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := muq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := muq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := muq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (muq *MedUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(muq.driver.Dialect())
	t1 := builder.Table(meduser.Table)
	columns := muq.ctx.Fields
	if len(columns) == 0 {
		columns = meduser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if muq.sql != nil {
		selector = muq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if muq.ctx.Unique != nil && *muq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range muq.predicates {
		p(selector)
	}
	for _, p := range muq.order {
		p(selector)
	}
	if offset := muq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := muq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MedUserGroupBy is the group-by builder for MedUser entities.
type MedUserGroupBy struct {
	selector
	build *MedUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mugb *MedUserGroupBy) Aggregate(fns ...AggregateFunc) *MedUserGroupBy {
	mugb.fns = append(mugb.fns, fns...)
	return mugb
}

// Scan applies the selector query and scans the result into the given value.
func (mugb *MedUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mugb.build.ctx, "GroupBy")
	if err := mugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MedUserQuery, *MedUserGroupBy](ctx, mugb.build, mugb, mugb.build.inters, v)
}

func (mugb *MedUserGroupBy) sqlScan(ctx context.Context, root *MedUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mugb.fns))
	for _, fn := range mugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mugb.flds)+len(mugb.fns))
		for _, f := range *mugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MedUserSelect is the builder for selecting fields of MedUser entities.
type MedUserSelect struct {
	*MedUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mus *MedUserSelect) Aggregate(fns ...AggregateFunc) *MedUserSelect {
	mus.fns = append(mus.fns, fns...)
	return mus
}

// Scan applies the selector query and scans the result into the given value.
func (mus *MedUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mus.ctx, "Select")
	if err := mus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MedUserQuery, *MedUserSelect](ctx, mus.MedUserQuery, mus, mus.inters, v)
}

func (mus *MedUserSelect) sqlScan(ctx context.Context, root *MedUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mus.fns))
	for _, fn := range mus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
